# Load the modsecurity connector module.
load_module modules/ngx_http_modsecurity_module.so;

# Set the user to root
user  root;

# Set the amount of processes
# A worker process is a single-threaded process.
# If Nginx is doing CPU-intensive work such as SSL or 
# gzipping and you have 2 or more CPUs/cores
# then you may set worker_processes to be equal to the 
# number of CPUs or cores.
worker_processes  1;


events {
    # The worker_connections and worker_processes from the main section
    # allows you to calculate max clients you can handle:
    # max clients = worker_processes * worker_connection
    worker_connections  1024;
}


http {

    # Toggle Modsecurity on
    modsecurity on;

    # Set the location of the modsecurity rules configuration file.
    # This is the file we copied the rules to in the Dockerfile :
    # " /etc/modsecurity.d/owasp-crs/rules/*.conf" >> /etc/modsecurity.d/include.conf "
    modsecurity_rules_file /etc/modsecurity.d/include.conf;

    # The code below is like assigning a value to a variable.
    # we assign the server on which our flask application is running
    # to a variable called app.
    upstream app {
        # Set the upstream server ip and port
        # The ip and port we need to set are those
        # of the flask application:172.18.0.2:8000  
        # We can write flask_app instead of 172.18.0.2
        server flask_app:8000; 
    }

    server {
        # The server needs to listen on port 8000 because
        # flask application is running on port 8000
        listen       8000;

        # When navigating to localhost/ the upstream server is passed:
        # localhost:80/ --> 172.18.0.2:8000/index.html
        location / {
            proxy_pass http://app; #this actually means http://172.18.0.2:8000         
        }
    }
}
